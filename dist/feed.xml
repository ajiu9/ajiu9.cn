<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Ajiu9</title>
        <link>https://ajiu9.cn/</link>
        <description>Ajiu9' Blog</description>
        <lastBuildDate>Fri, 15 Mar 2024 02:12:45 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Ajiu9</title>
            <url>https://ajiu9.cn/avatar.png</url>
            <link>https://ajiu9.cn/</link>
        </image>
        <copyright>@2024-2025 湘ICP备2024048835号</copyright>
        <atom:link href="https://ajiu9.cn/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[在浏览器中实现页面打印]]></title>
            <link>https://ajiu9.cn/posts/window-print</link>
            <guid>https://ajiu9.cn/posts/window-print</guid>
            <pubDate>Sat, 09 Mar 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>如何在浏览器中打印页面内容？</p>
<p>通过iframe调用window.print打印</p>
<ol>
<li>创建一个隐藏的iframe</li>
<li>通过iframe的contentWindow属性获取iframe的window对象，然后调用window.print()方法</li>
</ol>
<p>iframe 通过设置style为display:none，position:absolute，width:0px，height:0px，left:-500px，top:-500px，这样可以隐藏iframe，但是不影响页面的布局。</p>
<p>注意： 如果有写入图片，因为是异步，需要在下一个宏任务中执行。</p>
<p>下面是一段代码：</p>
<pre><code class="language-js">function print(content) {
  let iframe = document.body.querySelector('#window-print')
  if (!iframe) {
    iframe = document.createElement('iframe')
    iframe.id = 'window-print'
    iframe.setAttribute('style', 'display:none;position:absolute;width:0px;height:0px;left:-500px;top:-500px;')
    document.body.appendChild(iframe)
  }
  const printDocument = iframe.contentWindow.document
  printDocument.write(content)
  printDocument.close()
  iframe.contentWindow.focus()
  setTimeout(() =&gt; {
    iframe.contentWindow.print()
  }, 0)
}
</code></pre>
<p>打印效果：<br>
<img src="https://static.ajiu9.cn/images/20240310203634jdJVNW.png" alt=""></p>
<p>该方法的优点是可以在不离开当前页面的情况下实现打印功能，且可以对打印的页面进行一些自定义设置，比如隐藏一些元素或者设置页面样式等。</p>
<p>使用该方法需要注意的是，由于涉及到跨域访问的问题，可能存在一些安全性和兼容性的问题，需要进行适当的测试和处理。</p>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[从0开始配置我的Mac]]></title>
            <link>https://ajiu9.cn/posts/configure-my-Mac-from-0</link>
            <guid>https://ajiu9.cn/posts/configure-my-Mac-from-0</guid>
            <pubDate>Thu, 04 Jan 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>我的电脑重装了系统，重新梳理了下软件和工具，以及配置，用了大概5个小时，使用起来爽多了</p>
</blockquote>
<h3>安装clashX</h3>
<h3>安装APP和Cli工具</h3>
<ol>
<li>安装HomeBrew 并用它安装app和cli工具。App 可以在homebrew-cask — Homebrew Formulae里找有没有，Cli 工具可以在homebrew-core — Homebrew Formulae 找有没有。</li>
</ol>
<pre><code class="language-bash"># 先开代理
export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890

# 安装 HomeBrew
/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;

# 用 HomeBrew 安装 App，以下是我可以用 HomeBrew 安装的 App 列表
brew install --cask  battery-buddy  espanso google-chrome gas-mask obsidian visual-studio-code Paycast Picsee

# 安装 Cli 工具
brew install autojump diff-so-fancy  fd gh git nvm pnpm tree
</code></pre>
<ol>
<li>用 Mac App Store 安装额外 App。</li>
</ol>
<ul>
<li>Bob</li>
<li>RunCat</li>
<li>Influse</li>
</ul>
<h3>准本本地目录</h3>
<p>在 ~/Documents 下建目录Code, SoftwareConfigurationCode和Notes。（后续添加更多）Code用于存代码；SoftwareConfiguration 用于保存各种软件配置，把 Espanso 等的配置放在这里。</p>
<h3>配置App</h3>
<ol>
<li>
<p>Karabiner-Elements<br>
参考 Karabiner-Element 配置 F19 键 - HackMD 。在 Karabiner-Elements complex_modifications rules 搜「Change caps_lock key」，import 后只保留一条和 F19 相关的，然后在命令行里编辑「~/.config/karabiner/karabiner.json」，把刚才那条规则的「caps_lock」换成「right_command」（两处）。这样你就把基本不会用到的「右⌘」废物利用变成了「F19」键，然后你的快捷键组合会多很多。</p>
<p>如果你仔细看配置，会发现「F19」是由四个键「⌘⇧⌃⌥」组成的，在一些 App 的快捷键配置里你会看到四个键，不要奇怪，这也是他。</p>
</li>
<li>
<p>Raycast<br>
快捷键操作集成窗口，超级好用，用来组合F19可以玩出很多花样</p>
</li>
<li>
<p>zsh<br>
安装 zsh 和 starship，starship 是 rust 写的 prompt 工具，极快</p>
</li>
</ol>
<pre><code class="language-bash">brew install starshipecho 'eval &quot;$(starship init zsh)&quot;' &gt;&gt; ~/.zshrc
</code></pre>
<p>安装 zsh 的插件 zsh-autosuggestions、zsh-completions 和 fast-syntax-highlighting。</p>
<pre><code class="language-bash">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-$HOME/Documents/SoftwareConfiguration/zsh}/zsh-autosuggestionsgit ÏÏÏclone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-$HOME/Documents/SoftwareConfiguration/zsh}/zsh-completionsgit clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/Documents/SoftwareConfiguration/zsh}/fast-syntax-highlighting
</code></pre>
<pre><code class="language-bash">export HOMEBREW_NO_AUTO_UPDATE=1

# Alias
alias ip=&quot;ipconfig getifaddr en0&quot;
alias sshconfig=&quot;vim ~/.ssh/config&quot;
alias gitconfig=&quot;vim ~/.gitconfig&quot;

# chore
alias br=&quot;bun run&quot;
alias c='code .'
alias pi=&quot;echo 'Pinging Baidu' &amp;&amp; ping www.baidu.com&quot;
alias ip=&quot;ipconfig getifaddr en0 &amp;&amp; ipconfig getifaddr en1&quot;
alias cip=&quot;curl cip.cc&quot;
alias hosts=&quot;vi /etc/hosts&quot;
alias cdtemp=&quot;cd `mktemp -d /tmp/ajiu9-XXXXXX`&quot;

function grandom() {
  # 获取当前日期
  current_date=$(date &quot;+%Y-%m-%d&quot;)
  # 生成4个随机数字
  random_number=$(( RANDOM % 676 ))
  # 将随机数转换为A-Z随机字符
  random_chars=&quot;&quot;
  for (( i=0; i&lt;4; i++)); do
    random_char_index=$(( RANDOM % 26 ))
    random_char=$(printf \\$(printf '%03o' $((65 + random_char_index))))
    random_chars=&quot;${random_chars}${random_char}&quot;
  done
  # 格式化为指定格式的字符串
  formatted_string=&quot;${current_date}-${random_chars}&quot;
  if [[ -n $1 ]]; then
    echo `git checkout -b &quot;$1&quot;/ajiu9-&quot;$formatted_string&quot;`
  else
    echo `git checkout -b ajiu9-&quot;$formatted_string&quot;`
  fi
}

## system
alias showFiles=&quot;defaults write com.apple.finder AppleShowAllFiles YES &amp;&amp; killall Finder&quot;
alias hideFiles=&quot;defaults write com.apple.finder AppleShowAllFiles NO &amp;&amp; killall Finder&quot;

# cd
alias ..='cd ../'
alias ...='cd ../../'
alias ..l.='cd ../../ &amp;&amp; ll'
alias ....='cd ../../../'
alias ~=&quot;cd ~&quot;
alias -- -=&quot;cd -&quot;
alias ll=&quot;ls -alhG&quot;
alias ls=&quot;ls -G&quot;

# git
alias gps=&quot;git push&quot;
alias gpl=&quot;git pull&quot;
alias gt=&quot;git status -sb&quot;
alias ga=&quot;git add .&quot;
alias gc=&quot;git commit -av&quot;
alias gcr=&quot;git checkout master &amp;&amp; git fetch &amp;&amp; git rebase&quot;
alias gclean=&quot;git reset --hard &amp;&amp; git clean -df&quot;
alias grebase=&quot;git fetch &amp;&amp; git rebase -i&quot;
alias glg=&quot;git log --pretty='%C(red)%h%Creset%C(yellow)%d%Creset %s %C(cyan)(%ar)%Creset'&quot;
alias gdel=&quot;git branch --merged master | egrep -v '(\*|master|release|bug$|dev)' | xargs -n 1 -r git branch -d&quot;
alias gck=&quot;git checkout&quot;
function gb() {
  echo `git checkout &quot;$1&quot; &amp;&amp; git pull &amp;&amp; git checkout -b &quot;$2&quot;`
}

function record() {
cd ~/screencapture/jpg;
RES_WIDTH=$(/usr/sbin/system_profiler SPDisplaysDataType | grep Resolution);
RES_WIDTH=(${RES_WIDTH:22:4});
RES_WIDTH=$((RES_WIDTH/2));
while :
NOW=$(date +&quot;%y%m%d%H%M%S&quot;);
do screencapture -C -t jpg -x ~/screencapture/jpg/$NOW.jpg;
sleep 7 &amp; pid=$!
NOW=$(date +&quot;%y%m%d%H%M%S&quot;);
wait $pid
done
}

function movie() {
NOW=$(date +&quot;%y%m%d%H%M%S&quot;);
cd ~/screencapture/jpg;
cnt=0
rm -rf .DS_Store;
for file in *
do
if [ -f &quot;$file&quot; ] ; then
ext=${file##*.}
printf -v pad &quot;%05d&quot; &quot;$cnt&quot;
mv &quot;$file&quot; &quot;${pad}.${ext}&quot;
cnt=$(( $cnt + 1 ))
fi
done;
rm -rf 00000.jpg;
for pic in *.jpg;
do convert $pic -resize 50% $pic;
done;
ffmpeg -r 24 -i %05d.jpg -b 20000k ~/screencapture/mov/$USER-$NOW.mov;
rm -rf ./*.jpg;
}

function mcd {
mkdir $1 &amp;&amp; cd $1;
}

function pfd() {

osascript 2&gt;/dev/null &lt;&lt;EOF

tell application &quot;Finder&quot;

return POSIX path of (target of window 1 as alias)

end tell

EOF

}

function cdf() {
cd &quot;$(pfd)&quot;
}

function ,touch {
mkdir -p &quot;$(dirname &quot;$1&quot;)&quot; &amp;&amp; touch &quot;$1&quot;
}

function ,take() {
mkdir -p &quot;$(dirname &quot;$1&quot;)&quot; &amp;&amp; touch &quot;$1&quot; &amp;&amp; take &quot;$(dirname &quot;$1&quot;)&quot;
}

# load zsh-completions
autoload -U compinit &amp;&amp; compinit
source ~/Documents/SoftwareConfiguration/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/Documents/SoftwareConfiguration/zsh/zsh-completions/zsh-completions.plugin.zsh
source ~/Documents/SoftwareConfiguration/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.bash_profile

[ -f &quot;/usr/local/etc/profile.d/autojump.sh&quot; ] &amp;&amp; . &quot;/usr/local/etc/profile.d/autojump.sh&quot; # This loads autojump

# bun completions
[ -s &quot;/Users/wulongbiao/.bun/_bun&quot; ] &amp;&amp; source &quot;/Users/wulongbiao/.bun/_bun&quot;

# bun
export BUN_INSTALL=&quot;$HOME/.bun&quot;
export PATH=&quot;$BUN_INSTALL/bin:$PATH&quot;
export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles
# pnpm
export PNPM_HOME=&quot;/Users/wulongbiao/Library/pnpm&quot;
export PATH=&quot;$PNPM_HOME:$PATH&quot;

# use starship theme (needs to be at the end)
eval &quot;$(starship init zsh)&quot;
</code></pre>
<ol start="4">
<li>额外的命令行工具：Bun 和 Projj</li>
</ol>
<p>安装 Bun。主要是用他的 run 命令，极快，上面也有别名 <code>br</code>，比如执行比如 <code>br dev</code> 即 <code>npm run dev</code>。</p>
<pre><code>curl -fsSL https://bun.sh/install | bash
</code></pre>
<p>安装 PROJJ，用他来管理 Code 下的仓库，按「domain/group/repo」这样组织，找起来会比较容易。</p>
<pre><code class="language-bash">pnpm i projj projj-hooks -g
projj init
</code></pre>
<ol start="5">
<li>然后编辑 ~/.projj/config.json</li>
</ol>
<pre><code class="language-json">{
  &quot;base&quot;: [
    &quot;/Users/wulongbiao/Documents/Code&quot;
  ],
  &quot;hooks&quot;: {
    &quot;postadd&quot;: &quot;projj_git_config_user&quot;,
    &quot;clean&quot;: &quot;clean&quot;
  },

  &quot;postadd&quot;: {
    &quot;github.com&quot;: {
      &quot;name&quot;: &quot;ajiu9&quot;,
      &quot;email&quot;: &quot;615944323@qq.com&quot;
    }
  },
  &quot;alias&quot;: {
    &quot;github://&quot;: &quot;https://github.com/&quot;
  }
}
</code></pre>
<p>然后就可以愉快地用 PROJJ 添加项目了，比如。</p>
<pre><code class="language-bash">projj add git@github.com:ajiu9/eslint-config.git
</code></pre>
<ol start="6">
<li>Espanso<br>
在 ~/Documents/SoftwareConfiguration/Espanso 下建了个 base.yml，并软链到 Espanso 原来的配置文件夹里。</li>
</ol>
<pre><code class="language-yml"># espanso match file
# For a complete introduction, visit the official docs at: https://espanso.org/docs/
# You can use this file to define the base matches (aka snippets)
# that will be available in every application when using espanso.
# Matches are substitution rules: when you type the &quot;trigger&quot; string
# it gets replaced by the &quot;replace&quot; string.
matches:
  # Simple text replacement
  # NOTE: espanso uses YAML to define matches, so pay attention to the indentation!
  # But matches can also be dynamic:
  # Print the current date
  - trigger: ':date'
    replace: '{{mydate}}'
    vars:
      - name: mydate
    type: date
    params:
      format: '%m/%d/%Y'
  # Print the output of a shell command
  - trigger: ':shell'
    replace: '{{output}}'
    vars:
      - name: output
    type: shell
    params:
      cmd: 'echo ''Hello from your shell'''
  # And much more! For more information, visit the docs: https://espanso.org/docs/
  # misc
  - trigger: ;&gt;&gt;
    replace: ➡
  - trigger: ;vv
    replace: ⬇
  - trigger: ;^^
    replace: ⬆
  - trigger: ;&lt;&lt;
    replace: ⬅
  # life
  - trigger: ;mobi
    replace: 我的手机号
  - trigger: ;mail
    replace: 我的邮箱
  - trigger: ;addr
    replace: 我的家庭住址
  - trigger: ;officeAddr
    replace: 公司地址
  # faq
  - trigger: chongt
    replace: 冲突了，merge 下 master。
  # code
  - trigger: ;log
    replace: console.log($|$)
  - trigger: ;delay
    replace: const delay = (ms) =&gt; new Promise((res) =&gt; setTimeout(res, ms));
  # mac symbols
  - trigger: ':cmd'
    replace: ⌘
  - trigger: ':shift'
    replace: ⇧
  - trigger: ':ctrl'
    replace: ⌃
  - trigger: ':alt'
    replace: ⌥
  - trigger: ':opt'
    replace: ⌥
  - trigger: ':left'
    replace: ←
  - trigger: ':right'
    replace: →
  - trigger: ':up'
    replace: ↑
  - trigger: ':down'
    replace: ↓
  - trigger: ':caps_lock'
    replace: ⇪
  - trigger: ':esc'
    replace: ⎋
  - trigger: ':eject'
    replace: ⏏
  - trigger: ':return'
    replace: ↵
  - trigger: ':enter'
    replace: ⌅
  - trigger: ':tab'
    replace: ⇥
  - trigger: ':backtab'
    replace: ⇤
  - trigger: ':pgup'
    replace: ⇞
  - trigger: ':pgdown'
    replace: ⇟
  - trigger: ':home'
    replace: ↖
  - trigger: ':end'
    replace: ↘
  - trigger: ':space'
    replace: ␣
  - trigger: ':del'
    replace: ⌫
  - trigger: ':fdel'
    replace: ⌦
</code></pre>
<ol start="7">
<li>
<p>VSCode<br>
略</p>
</li>
<li>
<p>Git</p>
</li>
</ol>
<p>先配 name 和 email。</p>
<pre><code>git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;you@your-domain.com&quot;
</code></pre>
<p>再执行这两条命令。</p>
<pre><code>git config --global --add push.default currentgit config --global --add push.autoSetupRemote true
</code></pre>
<p>你会收获两个好处。1）不需要「git push origin xxx」，只要「git push」，2）再也不会遇到「no upstream branch」的报错，也不需要「git push --set-upstream origin test &amp;&amp; git push」。因为我们执行 git push 的大部分场景都是 push 到同名的 remote branch。来源是 Auto setup remote branch and never again see an error about the missing upstream | <a href="http://pawelgrzybek.com">pawelgrzybek.com</a>。</p>
<p>再修改 ~/.gitignore_global，加入和你 IDE 相关的 ignore 配置。我会把 .idea 加进去，这是和你相关的专有配置，如果给其他用 VSCode 的作者的项目提交时，都加上 .idea 的 .gitignore 配置，其实并不太礼貌。反之，VSCode 或其他编辑器工具的用户也要加上自己的。</p>
<pre><code>*~.DS_Store.idea
</code></pre>
<ol start="9">
<li>NVM 和 Node</li>
</ol>
<pre><code>nvm install 18node -v
</code></pre>
<h2>系统设置</h2>
<ol>
<li>General。1）Default Web Browser 用「Google Chrome」</li>
<li>Siri。直接禁掉。</li>
<li>Keyboard。1）Keyboard 里把 Key Repeat 调到「Fast」，把 Delay Util Repeat 调到「Short」，需要一点时间适应，适应后会感受到光标快速移动带来的效率提升，2）Text 里 use <code>&quot;</code> for double quotes，use <code>'</code> for single quotes，然后把其他都禁掉，不需要系统帮忙改，基本都是帮倒忙的，3）Shortcuts 里，Mission Control 用「⌥A」,Application windows 用「⌥S」，Show Desktop 用「⌥D」</li>
<li>Spotlight。只开 Applications、Bookmarks &amp; History、Documents、Folders、System Preferences。</li>
<li>Mission Control。把 Hot Corners 里的全部关掉，不需要，因为有 Thor 了，可以更快切除应用。</li>
<li>Notification。不必要的全关掉，我只开了 Calendar、Find By。</li>
<li>执行 <code>defaults write -g NSWindowShouldDragOnGesture -bool true</code>，然后就可以按住「⌘+⌃」然后鼠标点击任意地方拖动窗口了。</li>
</ol>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[vscode常用快捷键]]></title>
            <link>https://ajiu9.cn/posts/common-shortcuts-for-vscode</link>
            <guid>https://ajiu9.cn/posts/common-shortcuts-for-vscode</guid>
            <pubDate>Wed, 25 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>⇧⌘P</td>
<td>Show Command Palette （显示命令面板）</td>
</tr>
<tr>
<td>⌘P</td>
<td>Quick Open, Go to File… （快速打开文件）</td>
</tr>
<tr>
<td>⌘W</td>
<td>Close window/instance (关闭窗口/当前页)</td>
</tr>
<tr>
<td>⌃P</td>
<td>Select Previous in Quick Open (快速打开已选择过的文件)</td>
</tr>
<tr>
<td>⌃Q</td>
<td>Quick open navigate next in view picker (快速打开视图选择器导航)</td>
</tr>
<tr>
<td>⇧⌘.</td>
<td>Focus and select breadcrumbs, go to symbol inaccessible view (聚焦并选择面包屑，转到可访问视图中的符号)</td>
</tr>
<tr>
<td>⌘F</td>
<td>Find (搜索)</td>
</tr>
<tr>
<td>⌥⌘F</td>
<td>Replace (替换)</td>
</tr>
<tr>
<td>⇧⌘F</td>
<td>Show Search （-全局搜索）</td>
</tr>
<tr>
<td>⇧⌥F</td>
<td>Format document （格式化代码）</td>
</tr>
<tr>
<td>⌘G</td>
<td>Go to line (跳转行)</td>
</tr>
<tr>
<td>⌘B</td>
<td>Toggle sidebar visibility(切换侧边栏显示)</td>
</tr>
<tr>
<td>⌃`</td>
<td>Show integrated terminal (显示集成终端)</td>
</tr>
<tr>
<td>⌃-</td>
<td>Input back (光标返回)</td>
</tr>
<tr>
<td>⇧⌘\</td>
<td>Jump to matching bracket (跳转到匹配的括号)</td>
</tr>
<tr>
<td>⌘Enter/⇧⌘Enter</td>
<td>Insert the line below/above</td>
</tr>
<tr>
<td>⇧⌘B/⌘B</td>
<td>View: Toggle Secondary Side Bar Visibility(切换侧边栏)</td>
</tr>
<tr>
<td>⌥⌘⬅</td>
<td>View: Open Previous Editor/Tab(打开上一个标签页)</td>
</tr>
<tr>
<td>⌥⌘➡</td>
<td>View: Open Next Editor/Tab(打开下一个标签页)</td>
</tr>
<tr>
<td>⌃-</td>
<td>Navigate Back (返回上一个导航)</td>
</tr>
<tr>
<td>⇧⌃-</td>
<td>Navigate Forward (打开后一个导航)</td>
</tr>
<tr>
<td>⌘\</td>
<td>Split Right （右拆分）</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><img src="https://static.ajiu9.cn/Notes/2023101020015616969393161696939316647dHJymT.png" alt="hotkey"></p>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[怎么确定年目标，周计划，日计划]]></title>
            <link>https://ajiu9.cn/posts/how-to-determine-the-plan</link>
            <guid>https://ajiu9.cn/posts/how-to-determine-the-plan</guid>
            <pubDate>Sun, 17 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>这是一篇自我学习和思考的记录，同时参考自己的实际来实现自己应该怎么确定目标和完成计划。</p>
<p>1、首先介绍<strong>4个我个人认同的理念</strong>，健康第一、选择难的、选择可以带来更多可能性的、选择有复利效应的。在做选择时多想想这些，可以更快并且做出更符合长期利益的选择。</p>
<p>2、介绍一些方法论，包括定目标的WHEN、HOW、WHAT，以及基于LexFridman的方法改造的每日工作流。</p>
<h3>理念</h3>
<p>先说一些虚的理念，或者是指导性原则。<br>
1、<strong>健康第一</strong>。自己的身体健康永远第一位，否则没法好好陪伴家人，也没法好好工作。跑步锻炼老是提起，又很快忘掉，没有坚持下去。现在计划每天拿出一个小时来锻炼身体。</p>
<p>2、<strong>选择难的</strong>。左传中有一段话<em>取人之上，得其中也；取人之中，得其下也。</em> 如果你追求最高的标准，你可能会达到一种中等的状态；如果你只追求中等的标准，你可能会降至一个低等的状态。提醒我们要有高的目标和期望。应为实际结果往往要比期望的要低一些。</p>
<p>3、<strong>选择可以带来更多可能性的</strong>。和上一条有些重合，选择难的通常可以带来更多可能性。比如科学上网、ChatGPT、Copilot、English、Google等，因为它们可以带来更多可能性。</p>
<p>4、<strong>选择有复利效应的</strong>。有复利效应的事有写工具、写文档、学英语、写作、当然还有摇人【人多力量大】、懂取舍（知道不做什么）、解决痛点问题、多教多分享、多输入（只有输入足够多的知识才能做更好的决策）、本质解和现象解等。</p>
<h3>方法</h3>
<p>不管工作还是个人的，都是在走[定目标，拆目标，执行，完成🎉]这个循环，但是要确保目标很好地被完成，需要考虑什么时候定，怎么定，怎么执行。</p>
<p><strong>什么时候定目标</strong> ？越早越好，我刚开始执行，所以就是现在，我的目标包括个人的和工作的，最近思考了下自己的未来，自己以后想做什么，爱好是什么，能做什么，然后开始定目标，立flag。</p>
<p><strong>怎么定目标</strong>？我把自己想到的，眼前想做的，以后想做的，能做的，都写下来，然后问下家人的想法，然后作为今年的目标，今年只剩下一个季度了，哎，时间如流水，不舍昼夜。然后从中选出3-5个作为今年的最终目标。</p>
<p><strong>怎么执行</strong>？先拆目标，到里程碑维度，每个里程碑包含时间、负责人和具体的大任务；负责人主要是我自己。然后通过月计划、周计划、日计划进一步拆分；月计划和周计划拆分到以h为单位，日计划拆分到最多1h能完成的程度。我现在只做周计划和日计划，还没有月计划。每周日确定下周的日计划，每天前一天确定后一天的日计划。月末我会做定期回顾和整理，先这样执行，视情况调整。</p>
<p><strong>每天怎么安排</strong>？我参考的是Lex Fridman的每日工作流。他的日常是这样的：</p>
<ul>
<li>deep work 4h</li>
<li>社交媒体和音乐 30m</li>
<li>运动 2h</li>
<li>deep work 4h</li>
<li>晚餐</li>
<li>shallow work 4h</li>
<li>晚间阅读 2h</li>
</ul>
<p>我的时间安排：</p>
<ul>
<li>6:30 - 7:30 英语</li>
<li>7:30 - 8:50 上班</li>
<li>9:00 - 11: 15 Deep Work</li>
<li>11:15 - 11: 40 午饭</li>
<li>11：40 - 12:10 资讯</li>
<li>12:10 - 13:10 读书</li>
<li>13:10 - 13:30 午休</li>
<li>13:30 - 17:30 Deep Work</li>
<li>17:30 - 16:20 社交媒体</li>
<li>18:20 - 19:00 回家</li>
<li>19:00 - 20:00 锻炼</li>
<li>20:00 - 21:00 亲子时间</li>
<li>21:00 - 23:00 Shallow Work</li>
</ul>
<p>工作时间不回复不重要的消息，早上优先做昨天设定的3Frog任务，周日周末时间表不同，我可能在家带娃，或者户外活动。同时保证4小时的长文阅读，4小时的Deep Work。</p>
<p><img src="https://static.ajiu9.cn/Notes/2023101520370316973734231697373423408sJebk1.png" alt="daily plan"></p>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[图床，uPic和阿里oss搭建和使用]]></title>
            <link>https://ajiu9.cn/posts/construction-and-use-of-picture-bed</link>
            <guid>https://ajiu9.cn/posts/construction-and-use-of-picture-bed</guid>
            <pubDate>Sat, 16 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>对于经常写笔记的人来说，图片是必然不可少的。为了更好地管理和展示图片，可以搭建自己的图床。这是一篇总结如何使用uPic和阿里OSS来搭建和使用个人图床，轻松使用图片</p>
</blockquote>
<h3>图床使用uPic</h3>
<pre><code class="language-cmd">brew install bigwig-club/brew/upic --cask
</code></pre>
<h3>阿里OSS申请购买</h3>
<blockquote>
<p>OSS使阿里云的对象存储服务，需要付费使用，但是对于平常的博客文章而言，很便宜，我现在是申请的3个月免费使用，实际付费也不贵，一个月就2.16元，（资源包关联的按量付费实例不停机，按使用量收费），就平常的访问量而言，估计是很难超过使用量的。</p>
</blockquote>
<p><img src="https://static.ajiu9.cn/Notes/IITkfA.png" alt="每月价格"></p>
<h3>配置OSS</h3>
<p>有了OSS后，需要简单配置下，阿里云有官方教程，一步一步几分钟搞定。</p>
<ul>
<li>
<ol>
<li>创建bucket <img src="https://static.ajiu9.cn/Notes/5eGHP4.png" alt="bucket"></li>
</ol>
</li>
<li>
<ol start="2">
<li>击立即创建，勾选配置<img src="https://static.ajiu9.cn/Notes/nKvi0c.png" alt="配置"></li>
</ol>
</li>
<li>
<ol start="3">
<li>配置完成，如果有自己的域名的话可以配置好自己的域名，<s>我现在用的是阿里云的默认域名，还没买，下次再申请</s></li>
</ol>
</li>
</ul>
<ol>
<li>在 AccessKey管理中找到对应的key填写到uPic中<img src="https://static.ajiu9.cn/Notes/20230917112327.png" alt="AccessKey"></li>
</ol>
<h3>uPic图床配置</h3>
<p>在uPic偏好设置中，设置好图床！<br>
<img src="https://static.ajiu9.cn/Notes/20230917162239169493895916949389595970bFTu6.png" alt="图床配置"></p>
<h3>完成</h3>
<p>配置完成后就可以愉快的引用图片到文章中了，最后可以设置下图床的快捷键<img src="https://static.ajiu9.cn/Notes/2023091716261416949391741694939174953lwT8Qv.png" alt="快捷键"></p>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[前端webpack构建提速]]></title>
            <link>https://ajiu9.cn/posts/webpack-building-speed-up</link>
            <guid>https://ajiu9.cn/posts/webpack-building-speed-up</guid>
            <pubDate>Wed, 04 Jan 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>1.使用speed-measure-webpack-plugin进行速度分析</p>
<pre><code class="language-javascript">// 安装
npm install --save-dev speed-measure-webpack-plugin
// 使用方式
const SpeedMeasurePlugin = require(&quot;speed-measure-webpack-plugin&quot;);
const smp = new SpeedMeasurePlugin();
const webpackConfig = smp.wrap({
  plugins: [
    new MyPlugin(),
    new MyOtherPlugin()
  ]
});
</code></pre>
<ol start="2">
<li>使用webpack-bundle-analyzer进行体积分析</li>
</ol>
<pre><code class="language-javascript">// 安装
npm install --save-dev webpack-bundle-analyzer
// 使用
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
module.exports = {
 plugins: [
   new BundleAnalyzerPlugin()
 ]
}
</code></pre>
<ol start="3">
<li>使用多进程、多实例构建
<blockquote>
<p>使用<a href="https://webpack.js.org/loaders/thread-loader/">thread-loader</a>: 每次 webpack 解析一个模块，thread-loader 会将它及它的依赖分配给 worker 线程中</p>
</blockquote>
</li>
</ol>
<pre><code class="language-javascript">// webpack.config.js
const os = require('os')
const threads = os.cpus().length
console.info('编译线程数 =&gt; ', threads)
module.exports = {
  config.module
    .rule('vue')
    .use('thread-loader')
    .loader('thread-loader')
    .options({
      workers: threads
    })
    .end()
  config.module
    .rule('js')
    .use('thread-loader')
    .loader('thread-loader')
    .options({
      workers: threads
    })
    .end()
};
</code></pre>
<ol start="4">
<li>利用缓存提升二次构建速度
<blockquote>
<p><a href="https://webpack.js.org/configuration/cache/#cachetype">bable-loader</a>提供了一个参数来使用缓存, 有false,memory, filesystem等配置</p>
</blockquote>
</li>
</ol>
<pre><code class="language-javascript">module.exports = {
  //...
  cache: {
    type: 'filesystem',
  },
};
</code></pre>
<ol start="5">
<li>在webpack构建过程中移除无用的css代码方式
<blockquote>
<p><a href="https://www.npmjs.com/package/mini-css-extract-plugin">mini-css-extract-plugin</a>此插件将CSS提取到单独的文件中。它为每个包含CSS的JS文件创建一个CSS文件。它支持CSS和SourceMaps的按需加载。<br>
它建立在新的webpack v5功能之上，需要webpack 5才能工作。</p>
</blockquote>
</li>
</ol>
<pre><code class="language-javascript">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);

module.exports = {
  plugins: [new MiniCssExtractPlugin()],
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;],
      },
    ],
  },
};
</code></pre>
<p>6.对图片进行优化</p>
<blockquote>
<p>使用<a href="https://webpack.js.org/configuration/module/#ruleparserdataurlcondition">ruleparserdataurlcondition</a>减少http请求</p>
</blockquote>
<pre><code class="language-javascript">module.exports = {
  //...
  module: {
    rules: [
      {
        //...
        parser: {
          dataUrlCondition: {
            maxSize: 4 * 1024,
          },
        },
      },
    ],
  },
};
</code></pre>
<p>7.在生产构建时，使用代码拆分、splitChunks优化</p>
<blockquote>
<p><a href="https://webpack.js.org/configuration/optimization/">optimization</a>开启minimize： true, 配置<a href="https://webpack.js.org/configuration/optimization/#optimizationsplitchunks">splitChunks</a>来拆分合并代码，优化生产环境的代码，对常用的公用代码使用CDN<br>
<a href="https://medium.com/webpack/webpack-4-code-splitting-chunk-graph-and-the-splitchunks-optimization-be739a861366">webpack-4-code-splitting-chunk-graph-and-the-splitchunks-optimization</a><br>
比如对第二步中使用webpack-bundle-analyzer进行体积分析后得到的优化建议，可以配置一下代码来进行优化</p>
</blockquote>
<pre><code class="language-javascript">module.exports = {
splitChunks: {
      chunks: 'async',
      minChunks: 1,
      maxInitialRequests: 30,
      minSize: 0,
      cacheGroups: {
        default: {
          minChunks: 1,
          priority: -20,
          reuseExistingChunk: true
        },
        coreJs: {
          chunks: 'all',
          name: 'lib.core-js',
          test: /[\\/]node_modules[\\/]core-js[\\/]/
        },
        axios: {
          chunks: 'all',
          name: 'lib.axios',
          test: /[\\/]node_modules[\\/](axios|axios-ex)[\\/]/
        },
        handsontable: {
          chunks: 'all',
          name: 'lib.handsontable',
          test: /[\\/]node_modules[\\/](handsontable|@handsontable)[\\/]/
        },
        lodash: {
          chunks: 'all',
          name: 'lib.lodash',
          test: /[\\/]node_modules[\\/]lodash[\\/]/
        },
        moment: {
          chunks: 'all',
          name: 'lib.moment',
          test: /[\\/]node_modules[\\/]moment[\\/]/
        },
        i18n: {
          chunks: 'all',
          name: 'lib.i18n',
          test: /[\\/]node_modules[\\/]vue-i18n[\\/]/
        },
        common: {
          chunks: 'all',
          name: 'lib.common',
          priority: 0,
          test(module) {
            const includes = [
              'intro.js',
              'countup.js',
              'qs',
              'node-rsa',
              'vue-grid-layout'
            ]
            return (
              module.resource &amp;&amp;
              includes.some(pkg =&gt;
                module.resource.includes(
                  `${sep}node_modules${sep}${pkg}${sep}`
                )
              )
            )
          }
        }
      }
    }
}
</code></pre>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[构造函数、原型、实例、原型链的关系]]></title>
            <link>https://ajiu9.cn/posts/constructor-instance-prototype-chain</link>
            <guid>https://ajiu9.cn/posts/constructor-instance-prototype-chain</guid>
            <pubDate>Fri, 28 Sep 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h4>创建对象的几种方法</h4>
<pre><code class="language-js">// 1.使用new Object()
var o1 = new Object({name: 'o1'});
// 2.对象字面量 (这种方法其实就是第一种的简写)
var o2 = {name: 'o2'};
// 3.构造函数
var A = function(name) {
this.name = name;
}
var o3 = new A('o3');
// 4.Object.create()
var B = {name: 'o4'};
var o4 = Object.create(B);
</code></pre>
<h4>构造函数、原型、实例、原型链</h4>
<p>JavaScript是一门面向对象基于原型继承的语言,那么原型到底是怎么实现继承的？</p>
<p><img src="https://static.ajiu9.cn/images/20240311231356CGtgQw.png" alt="图片"></p>
<p>prototype原型是一个对象，只有函数才有的属性，这是在创建函数是js引擎自动添加的属性，其他对象可以通过它实现属性继承。<br>
<code>__proto__</code>是每个对象都有的属性，但不是一个规范属性，它指向的是构造函数的原型对象。(<code>__proto__</code>通过上面第四种方式<code>Object.create(O))</code>指向的是对象O)</p>
<pre><code class="language-js">// 1.创建构造函数Animal
var Animal = function(name) {    
  this.name = name
}
// 2.实例化一个对象dog
var dog = new Animal('dog');
// Animal 构造函数的原型的constructor属性指向构造函数本身
Animal.prototype.constructor === Animal // true
// dog实例的__proto__指向构造函数的原型
dog.__proto__ === Animal.prototype // true
</code></pre>
<p>原型链指由于<code>__proto__</code>是对象都有的属性，所以会形成一条由<code>__proto__</code>连起来的链条，递归访问<code>__proto__</code>最终到终点，最后指向<code>null</code>.<br>
当js查找对象的属性时，先查找对象本身有没有这个属性，如果不存在，就会在原型链上查找，直到找到或者到达终点的<code>null</code>。</p>
<h4>instanceof运算符</h4>
<p><code>instanceof</code>运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</p>
<p><img src="https://static.ajiu9.cn/images/20240311231424c991rT.png" alt="图片"></p>
<p>用<code>instanceof</code>来判断实例对象是否为构造函数直接生成的对象并不严格，因为出现在对象原型链中任何位置都会返回true，这时可以使用对象的<code>__proto__.constructor</code>是否严格等于构造函数来判断。</p>
<pre><code class="language-js">// 测试构造函数的prototype属性是否出现在对象的原型链中
dog instanceof Animal; // true
dog instanceof Object; // true
// 判断实例对象是否为构造函数直接生成
dog.__proto__.constructor === Animal; // true
</code></pre>
<h4>new 运算符</h4>
<p>执行new后</p>
<ul>
<li>一个新对象被创建，它继承自构造函数foo.prototype</li>
<li>构造函数foo被执行。执行的时候，相应的参数被传入，同时上下文<code>this</code>会被指定为这个新实例。 <code>new foo</code> 等于 <code>new foo()</code>,只能用在不传递任何参数的情况下。</li>
<li>如果构造函数返回了一个对象，那么这个对象会整个取代new出来的结果。如果构造函数没有返回对象，那么new出来的结果为第一步创建的对象。</li>
</ul>
<pre><code class="language-js">// new 的执行如下
var new1 = function(func) {    
// 第一步:一个新对象被创建，它继承自构造函数func.prototype  
  var o = Object.create(func.prototype);    
 // 第二步：构造函数func被执行。执行的时候，相应的参数被传入，同时上下文`this`会被指定为这个新实例。    
 var k = func.call(o);    
 // 第三步   
  if (typeof k === 'object') {
     return k
   } else {
     return o
   }
}
// 验证new内部原理是否和new1函数的执行过程一样
//构造函数
var A = function(name) {   
   this.name = name;
}
// new运算符
var o3 = new A('o3');
// new1()
var o6 = new1(A);
// 接下来验证通过new1生成的o6对象是否和new生成的o3一样
o6 instanceof A; // true
o6 instanceof Object; // true
o6.__proto__.constructor === A; // true
A.prototype.walk= function(){
  console.log('walk')
}
o6.walk() // walk
o3.walk() // walk
</code></pre>
<p>通过上面的代码可以看出，new的执行原理了吧。</p>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[前端通信类以及跨域的几种方法]]></title>
            <link>https://ajiu9.cn/posts/cross-domain-methods</link>
            <guid>https://ajiu9.cn/posts/cross-domain-methods</guid>
            <pubDate>Thu, 27 Sep 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h4>什么是同源策略及限制</h4>
<p>同源策略，它是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。<br>
所谓同源是指，域名，协议，端口（http协议的默认端口是80）相同。<br>
例如一个浏览器的两个tab页中分别打开来百度和谷歌的页面，当浏览器的百度tab页执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问。</p>
<p>限制：</p>
<ul>
<li>
<p>Cookie、LocalStorage和IndexDB无法获取。</p>
</li>
<li>
<p>无法获取和操作DOM。</p>
</li>
<li>
<p>不能发送Ajax请求。</p>
</li>
</ul>
<h4>前后端如何通信</h4>
<ul>
<li>
<p>Ajax：同源下的通信方式。</p>
</li>
<li>
<p>WebSocket：不受同源策略的限制，支持跨域。</p>
</li>
<li>
<p>CORS： CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。</p>
</li>
</ul>
<h4>如何创建Ajax</h4>
<p>需要知道以下几点：</p>
<ul>
<li>
<p>XMLHttpRequest的工作原理</p>
</li>
<li>
<p>兼容性处理（XMLHttpRequest只在高版本的浏览器支持）</p>
</li>
<li>
<p>事件的触发条件</p>
</li>
<li>
<p>事件的触发顺序</p>
</li>
</ul>
<pre><code class="language-js">util.ajax = function (options) {
  const opt = Object.assin({
    url: '',
    ype: 'get',
    data: {},
    success() {},
    error() {},
  }, options)

  if (opt.url) {
    // 兼容性处理
    const xhr = XMLHttpRequest
      ? new XMLHttpRequest()
      : new ActiveXObject('Microsoft.XMLHTTP')
    const data = opt.data
    let url = opt.url
    const type = opt.type.toUpperCase()
    const dataArr = []
    for (const k in data)
      dataArr.push(`${k}=${data[k]}`)

    if (type === 'GET') {
      url = `${url}?${dataArr.join('&amp;')}`
      xhr.open(type, url.replace(/\?$/g, ''), true)
      xhr.send()
    }
    if (type === 'POST') {
      xhr.open(type, url, true)
      xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
      xhr.send(dataArr.join('&amp;'))
    }
    xhr.onload = function () {
      if (xhr.status === 200 || xhr === 304) {
        var res
        if (opt.success &amp;&amp; opt.success instanceof Function) {
          res = xhr.responseText
          if (typeof res === 'string') {
            res = JSON.parse(res)
            opt.success.call(xhr, res)
          }
        }
      }
      else {
        if (opt.error &amp;&amp; opt.error instanceof Function)
          opt.error.call(xhr, res)
      }
    }
  }
}
</code></pre>
<h4>跨域通信的几种方式</h4>
<ul>
<li>jsonp</li>
<li>Hash</li>
<li>webSocket</li>
<li>postMessage</li>
<li>CORS</li>
</ul>
<p><strong>1.jsonp</strong><br>
jsonp原理： 通过<code>&lt;script&gt;</code>标签的异步加载来实现。例如在<code>&lt;head&gt;</code>标签中通过<code>&lt;script&gt;</code>中的url加载的js。</p>
<pre><code class="language-js">/**
* [function 拼接url]
* @param  {[Object]]} data [description]
* @return {[value=key&amp;value1=key1]} [description]
*/var util = {}
util.param = function (data) {
  var url = ''
  for (var k in data) {
    let value = data[k] !== undefined ? data[k] : ''
    url += `&amp;${k}=${encodeURIComponent(value)}`
  }
  return url ? url.substring(1) : ''
}
/**
  * [function 判断是否为函数]
  * @param  {[type]} source [description]
  * @return {[type]}        [description]
  */
util.isFunction = function (source) {
  return '[object Function]' === Object.prototype.toString.call(source);
};
/**
  * [function 获取一个随机的5位字符串]
  * @param  {[type]} prefix [description]
  * @return {[type]}        [description]
  */
 util.getName = function (prefix) {
    return prefix + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);
  };
/**
  * [function 在页面中注入js脚本]
  * @param  {[type]} url     [description]
  * @param  {[type]} charset [description]
  * @return {[type]}         [description]
  */
 util.createScript = function (url, charset) {
  var script = document.createElement('script');
  script.setAttribute('type', 'text/javascript');
  charset &amp;&amp; script.setAttribute('charset', charset);
  script.setAttribute('src', url);
  script.async = true;
  return script;
};
// jsop实现
util.jsonp = function(url, data, onsuccess, onerror, charset) {
  // 第一步，全局注册一个callback回调函数
  var callbackName = util.getName(_callback);
  window[callbackName] = function() {
    if (onsuccess &amp;&amp; onsuccess.util.isFunction) {
       onsuccess(arguments[0]);
    }
  }
  // 第二步 动态创建Script标签
  url += (url.indexOf('?') &lt; 0 ? '?' : '&amp;') + util.param(data);
  var script = util.createScript(url + '&amp;callback=' + callbackName, charset);
  // 第三步 发送script请求
  document.getElementsByTagName('head')[0].appendChild(script);
  // 第四步 监听函数
  script.onload = script.onreadystatechange = function () {
    if (!script.readyState || /loaded|complete/.test(script.readyState)) {
      script.onload = script.onreadystatechange = null;// 移除该script的 DOM 对象
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
    // 删除函数或变量
    window[callbackName] = null;
  }
};
script.onerror = function () {
  if (onerror &amp;&amp; util.isFunction(onerror)) {
    onerror();
  }
};
}
</code></pre>
<p>实例：</p>
<pre><code class="language-js">util.jsonp('https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg', {
  g_tk: 5381,
  inCharset: 'utf-8',
  outCharset: 'utf-8',
  notice: 0,
  format: 'jsonp',
  platform: ' h5',
  uin: 0,
  needNewCode: 1
}, function () {
  console.log(arguments)
})
</code></pre>
<p><strong>2.Hash（片段识别符）</strong><br>
url的<code>#</code>后面的内容就叫Hash。Hash的改变，页面不会刷新。这就是用 Hash 做跨域通信的基本原理(url的?后面的内容叫Search。Search的改变，会导致页面刷新)。<br>
实例：<br>
页面A通过iframe或frame嵌入了跨域页面B。<br>
窗口可以把信息，写入子窗口的片段标识符。</p>
<pre><code class="language-js">var src = originURL + '#' + data;
document.getElementById('myIFrame').src = src;
</code></pre>
<p>子窗口通过监听hashchange事件得到通知。</p>
<pre><code class="language-js">window.onhashchange = checkMessage;
function checkMessage() {var message = window.location.hash;
// ...
}
</code></pre>
<p>同样的，子窗口也可以改变父窗口的片段标识符。</p>
<pre><code class="language-js">parent.location.href= target + &quot;#&quot; + hash;
</code></pre>
<p><strong>3.postMessage</strong><br>
HTML5引入了一个全新的API：跨文档通信 API（Cross-document messaging）。这个API为window对象新增了一个window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源。</p>
<pre><code class="language-js">// postMessage
// 窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息B
window.postMessage('data', 'http://B.com');
// 在窗口B中监听A
window.addEventListener('message', function (event) {console.log(event.origin)});
// 发送消息的窗口console.log(event.source); 
// 消息发向的网址console.log(event.data); 
// 消息内容}, false);
</code></pre>
<p><strong>4.webSocket</strong><br>
WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
<pre><code class="language-js">var ws = new webSocket(&quot;wss://echo.websocket.org&quot;);
ws.onopen = function(evt) {console.log(&quot;Connection open ...&quot;);
ws.send(&quot;Hello WebSockets!&quot;);
};

ws.onmessage = function(evt) {console.log( &quot;Received Message: &quot; + evt.data);
ws.close();
};

ws.onclose = function(evt) {console.log(&quot;Connection closed.&quot;);
};
</code></pre>
<blockquote>
<p>Websocket【参考资料】<a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a></p>
</blockquote>
<p><strong>4.CORS</strong><br>
CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>
跨域时，浏览器会拦截Ajax请求，并在http头中加Origin。</p>
<pre><code class="language-js">fetch('/some/url/', {
  method: 'get',
}).then(function (response) {
  // 请求成功后执行操作
}).catch(function (err) {
  // 请求失败后执行操作
});
</code></pre>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">CORS【参考资料】</a></p>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[DOM事件]]></title>
            <link>https://ajiu9.cn/posts/dom-event</link>
            <guid>https://ajiu9.cn/posts/dom-event</guid>
            <pubDate>Wed, 26 Sep 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h4>事件级别</h4>
<ul>
<li>DOM0<br>
<code>element.onclick = function(){}</code></li>
<li>DOM2<br>
<code>element.addEventListener('click', function(){}, false)</code></li>
<li>DOM3<br>
<code>element.addEventListener('keyup', function(){}, false</code><br>
在DOM2事件后新增了UI事件、鼠标事件、键盘事件等事件类型</li>
</ul>
<h4>事件模型</h4>
<ul>
<li>事件捕获</li>
<li>事件冒泡</li>
</ul>
<h4>DOM事件流</h4>
<p>DOM(文档对象模型)结构是一个树型结构，当一个HTML元素产生一个事件时，该事件会在元素节点与根结点之间的路径传播，路径所经过的结点都会收到该事件，这个传播过程可称为DOM事件流。</p>
<h4>DOM事件流的具体流程</h4>
<p>在DOM兼容浏览器中，事件流中分三个级段：</p>
<ul>
<li>捕获阶段（Capture Phase）：事件从window自上而下向目标节点传播的阶段；</li>
<li>目标阶段（Target Phase）：正的目标节点正在处理事件的阶段；</li>
<li>冒泡阶段（Bubbling Phase）：事件从目标节点自上而下向window传播的阶段。<br>
<img src="https://static.ajiu9.cn/images/20240310220404oy7dPw.png" alt="图片"></li>
</ul>
<h4>Event对象的常见应用</h4>
<ul>
<li>event.preventDefault() 阻止默认事件</li>
<li>event.stopPropagation() 阻止捕获和冒泡阶段中当前事件的进一步传播</li>
<li>event.stopImmediatePropagation() 阻止事件冒泡并且阻止相同事件的其他侦听器被调用</li>
<li>event.currentTarget 当事件遍历DOM时，标识事件的当前目标。它总是引用事件处理程序附加到的元素(当前绑定的事件元素)</li>
<li>event.target 标识事件发生的元素（当前被点击的元素）</li>
</ul>
<h4>自定义事件</h4>
<blockquote>
<p>语法<code>event = new Event(typeArg, eventInit);</code><br>
typeArg 是DOMString 类型，表示所创建事件的名称。<br>
eventInit可选,是 EventInit 类型的字典，接受以下字段:</p>
<ul>
<li>“bubbles”，可选，Boolean类型，默认值为 false，表示该事件是否冒泡。</li>
<li>“cancelable”，可选，Boolean类型，默认值为 false， 表示该事件能否被取消。</li>
<li>“composed”，可选，Boolean类型，默认值为 false，指示事件是否会在影子DOM根节点之外触发侦听器。</li>
</ul>
</blockquote>
<pre><code>// 创建一个支持冒泡且不能被取消的attach事件var ev = new Event(&quot;attach&quot;, {&quot;bubbles&quot;:true, &quot;cancelable&quot;:false});document.dispatchEvent(ev);// 事件可以在任何元素触发，不仅仅是documentmyDiv.dispatchEvent(ev);
</code></pre>
<p><code>customEvent</code>事件是由程序创建的，可以有任意自定义功能的事件。</p>
<pre><code>// 添加一个适当的事件监听器obj.addEventListener(&quot;cat&quot;, function(e) { process(e.detail) })// 创建并分发事件var event = new CustomEvent(&quot;cat&quot;, {&quot;bubbles&quot;: true, &quot;cancelable&quot;: false, &quot;detail&quot;:{&quot;hazcheeseburger&quot;:true}})
obj.dispatchEvent(event)
</code></pre>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[CSS盒模型和边距重叠解决方案（BFC）]]></title>
            <link>https://ajiu9.cn/posts/css-box-model-and-margin-overlap-solution</link>
            <guid>https://ajiu9.cn/posts/css-box-model-and-margin-overlap-solution</guid>
            <pubDate>Tue, 25 Sep 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h3>CSS盒模型的基本概念</h3>
<p>盒模型由内向外由content,padding, border, margin组成。<br>
盒模型有两种：标准模型，IE模型。</p>
<h3>标准模型和IE模型的区别</h3>
<p>这俩种盒模型的区别是计算宽度和高度的不同。<br>
标准模型的宽高只计算内容（content）,IE模型宽高计算为内容（content）+填充（padding）+边框（border）的总宽高。</p>
<p><img src="https://static.ajiu9.cn/images/20240310214341Gxd31S.png" alt="图片"></p>
<p><img src="https://static.ajiu9.cn/images/20240310214237UjGOJB.png" alt="图片"></p>
<h3>如何设置这俩种盒模型</h3>
<pre><code>/*标准模型*/
box-sizing: content-box;
/*IE模型*/
box-sizing: border-box;
</code></pre>
<h3>JS如何获取盒模型的宽和高</h3>
<pre><code>var node = document.getElementById('node')
</code></pre>
<ul>
<li>
<p>node.style.width/height<br>
这种方式只能取到dom元素内联样式的宽和高，通过外联样式link引入和在style标签中设置的样式这两者都是获取不到node的宽和高的</p>
</li>
<li>
<p>node.currentStyle.width/height<br>
这种方式是获取渲染后的结果，但只在旧版本的IE浏览器中支持，该特性是非标准的，尽量不要在生产环境中使用它。</p>
</li>
<li>
<p>window.getComputerStyle(node).width/height<br>
Window.getComputedStyle()方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。和上一种方式是相似的，但通用性更好。</p>
</li>
<li>
<p>node.getBoundingClientRect().width/height<br>
Element.getBoundingClientRect()方法返回元素的大小及其相对于视口的位置。包含边框(border)、内边距(padding)以及CSS设置的宽度(width)值</p>
</li>
<li>
<p>node.offsetWidth/offsetHeight<br>
这种方式是测量包含元素的边框(border)、内边距(padding)、滚动条(scrollbar)（如果存在的话）、以及CSS设置的宽度(width)和高度（height）的值。</p>
</li>
</ul>
<h3>边距重叠</h3>
<ul>
<li>
<p>父子元素边距重叠（子元素设置margin-top:20px; 父元素也一起有了上边距）</p>
</li>
<li>
<p>兄弟元素边距重叠（兄弟元素的下边距margin-bottom和他兄弟元素上边margin-top距重叠，重叠规则是取它们之间最大值）</p>
</li>
<li>
<p>空元素的边距重叠（空元素的上边距margin-top和下边距margin-bottom重叠，重叠规则是取它们之间最大值）</p>
</li>
</ul>
<h3>边距重叠解决方案（BFC）</h3>
<p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p>
<h4>W3C对BFC的定义如下：</h4>
<p>浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。</p>
<h4>BFC布局规则：</h4>
<ul>
<li>
<p>内部的Box会在垂直方向属于同一个BFC的两个相邻Box的margin会发生重叠。</p>
</li>
<li>
<p>BFC的区域不会与float box重叠。</p>
</li>
<li>
<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之也如此。</p>
</li>
<li>
<p>计算BFC的高度时，浮动元素也参与计算。</p>
</li>
</ul>
<h3>如何创建BFC</h3>
<p>根据BFC的定义，创建方式有几种</p>
<ul>
<li>
<p>float属性不为none</p>
</li>
<li>
<p>position为absolute或fixed</p>
</li>
<li>
<p>display为inline-block, table-cell, table-caption, flex, inline-flex</p>
</li>
<li>
<p>overflow不为visible</p>
</li>
</ul>
<h3>应用场景</h3>
<ul>
<li>
<p>自适应浮动布局中浮动重叠（给该自适应元素创建BFC）</p>
</li>
<li>
<p>解决父子元素边距重叠（给父元素创建BFC）</p>
</li>
<li>
<p>清楚浮动（给浮动元素的父元素创建BFC）</p>
</li>
</ul>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[HTTP协议类]]></title>
            <link>https://ajiu9.cn/posts/http-protocol-class</link>
            <guid>https://ajiu9.cn/posts/http-protocol-class</guid>
            <pubDate>Tue, 25 Sep 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h4>http简介</h4>
<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP）。<br>
通常，由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。</p>
<h4>http协议的主要特点</h4>
<ul>
<li>
<p>简单快速 ：HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接，URL是一种特殊类型的URI。访问某个资源只要输入URI即可。</p>
</li>
<li>
<p>灵活：每个http协议中。有一个头部分，有个数据类型，通过一个http协议的就可以完成不同数据类型的传输。</p>
</li>
<li>
<p>无连接：连接一次就会断开，不会保持连接。</p>
</li>
<li>
<p>无状态：客户端和服务端通信，客户端向服务端发送请求，http建立连接、传输结束后，连接断开，下次客户端再请求数据，服务端是无法区分上次连接和这次连接是否是同一身份，因为服务端没有记住你的状态，从http协议上是无法区分两次连接者的身份。</p>
</li>
</ul>
<h4>http报文的组成部分</h4>
<ul>
<li>请求报文：请求行、请求头、空行、请求体</li>
<li>响应报文：状态行、响应头、空行、响应体</li>
</ul>
<p><img src="https://static.ajiu9.cn/images/20240310214516948RBW.png" alt="图片"></p>
<p>请求报文格式</p>
<p><img src="https://static.ajiu9.cn/images/20240310214534AyGWUp.png" alt="图片"></p>
<h5>请求报文示例</h5>
<pre><code>GET /build/music/ HTTP/1.1
Host: www.ajiu9.com
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
If-None-Match: W/&quot;5ba9f717-234&quot;
If-Modified-Since: Tue, 25 Sep 2018 08:51:35 GMT
</code></pre>
<ul>
<li>
<p>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用协议和版本。</p>
</li>
<li>
<p>第二部分：求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息。</p>
</li>
<li>
<p>第三部分：空行，请求头部后面的空行是必须的。</p>
</li>
<li>
<p>第四部分：请求数据也叫主体，可以添加任意的其他数据（这个例子的请求数据为空）。</p>
</li>
</ul>
<h5>响应报文示例</h5>
<pre><code>HTTP/1.1 304 Not Modified
Date: Tue, 25 Sep 2018 08:53:14 GMT
Via: 1.1 varnish
Cache-Control: max-age=600
ETag: W/&quot;5ba9f717-234&quot;
Expires: Tue, 25 Sep 2018 09:03:04 GMT
Age: 10
Connection: keep-alive
X-Served-By: cache-tyo19932-TYO
X-Cache: HIT
X-Cache-Hits: 1
X-Timer: S1537865594.266742,VS0,VE0
Vary: Accept-Encoding
X-Fastly-Request-ID: d33e186dc5ff53c01d8128c32ff8a0f1092c9832
</code></pre>
<ul>
<li>
<p>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</p>
</li>
<li>
<p>第二部分：消息报头，用来说明客户端要使用的一些附加信息</p>
</li>
<li>
<p>第三部分：空行，消息报头后面的空行是必须的。</p>
</li>
<li>
<p>第四部分：响应正文，服务器返回给客户端的文本信息。</p>
</li>
</ul>
<h4>http请求方法</h4>
<ul>
<li>get ———— 获取资源</li>
<li>post ———— 传输资源</li>
<li>put ———— 更新资源</li>
<li>delete ———— 删除资源</li>
<li>head ———— 获得报文首部</li>
</ul>
<h4>get和post的区别</h4>
<ul>
<li>
<p><code>get在浏览器回退是无害的，而post会再次提交请求</code></p>
</li>
<li>
<p><code>get请求会被浏览器主动缓存，而post不会，除非手动设置</code></p>
</li>
<li>
<p><code>get请求参数会被完整保留在浏览器的历史记录里，而post中的参数不会被保留</code></p>
</li>
<li>
<p><code>get请求中传送的参数是有长度限制的（一般是2kb，不同浏览器不一样），post没有长度限制</code></p>
</li>
<li>
<p><code>get参数通过URL传递，post放在Request body中</code></p>
</li>
<li>
<p>get产生的URL地址可以被收藏，而get不可以</p>
</li>
<li>
<p>get请求只能进行url编码，而post支持多种编码方式</p>
</li>
<li>
<p>对参数的数据类型，get只接受ASCLL字符，而post没有限制</p>
</li>
<li>
<p>get比post更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息</p>
</li>
</ul>
<h4>http状态码</h4>
<ul>
<li>
<p>1xx：指示信息 ——表示请求已接收，继续处理</p>
</li>
<li>
<p>2xx：成功——表示请求已被成功接收</p>
</li>
<li>
<p>3xx：重定向——要完成请求必须进行更进一步的操作</p>
</li>
<li>
<p>4xx：客户端错误——请求有语法错误或请求无法实现</p>
</li>
<li>
<p>5xx：服务端错误——服务器未能实现合法的请求</p>
</li>
<li>
<p>200 OK：客户端请求成功</p>
</li>
<li>
<p>206 Partial Content: 客户发送了一个带Range头的GET请求，服务器完成了它</p>
</li>
<li>
<p>301 Move Parmanently：所请求的页面已经转移到新的url</p>
</li>
<li>
<p>302 Found：所请求的页面已经临时转移至新的url</p>
</li>
<li>
<p>304 Not Modified：客户端有缓冲的文档并发出了一个条件性的请求，服务器告诉客户，原来缓冲的文档还可以继续使用</p>
</li>
<li>
<p>400 Bad Request：客户端请求有语法错误，不能被服务端所理解</p>
</li>
<li>
<p>401 Unauthorized：请求未经授权,这个状态代码必须和WWW-Authenticate报头域一起使用</p>
</li>
<li>
<p>403 Forboidden：对被请求页面的访问被禁止</p>
</li>
<li>
<p>404 NOt Found：请求资源不存在</p>
</li>
<li>
<p>500 Internal Server Error：服务器发送不可预期的错误原来缓冲文档还可以继续使用</p>
</li>
<li>
<p>503 Server Unavailable：请求未完成，服务器临时过载或当机，一段时间后可能恢复正常</p>
</li>
</ul>
<h4>持久连接</h4>
<p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成 之后立即断开连接（HTTP协议为无连接的协议）；<br>
当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服 务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p>
<p>http 1.0中默认是关闭的，需要在http头加入”Connection: Keep-Alive”，才能启用Keep-Alive；<br>
http 1.1中默认启用Keep-Alive，如果加入”Connection: close “，才关闭。</p>
<p>目前大部分浏览器都是用http1.1协议，也就是说默认都会发起Keep-Alive的连接请求了，所以是否能完成一个完整的Keep-Alive连接就看服务器设置情况。</p>
<h4>管线化</h4>
<ul>
<li>
<p>1.在使用持久连接的情况下，某个连接上消息的传递类似于，请求一次响应一次并且不断开<br>
请求1-&gt; 响应1-&gt;请求2-&gt;响应2-&gt;请求3-&gt;响应3</p>
</li>
<li>
<p>2.管线化通道是持久建立的，把所有请求打包一次传输，所有响应打包一次传输<br>
请求1-&gt;请求2-&gt;请求3-&gt;响应1-&gt;响应2-&gt;响应3</p>
</li>
</ul>
<h4>管线化特点</h4>
<ul>
<li>
<p>管线化机制通过持久连接完成，仅HTTP/1.1支持此技术</p>
</li>
<li>
<p>只有get和head请求可以进行管线化，而post则有所限制</p>
</li>
<li>
<p>初次创建连接是不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议</p>
</li>
<li>
<p>管线化不会影响响应到来的顺序，如上面的例子所示，响应返还的顺序并未改变</p>
</li>
<li>
<p>HTTP/1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可</p>
</li>
<li>
<p>由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如Chrome和Firefox默认并未开启管线化支持</p>
</li>
</ul>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[页面布局-三栏布局解决方案]]></title>
            <link>https://ajiu9.cn/posts/page-layout-three-column</link>
            <guid>https://ajiu9.cn/posts/page-layout-three-column</guid>
            <pubDate>Fri, 21 Sep 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h3>问题</h3>
<p>假设高度固定，请写出三栏布局，其中左栏、右栏宽度搁置200px,中间自适应。</p>
<p><img src="https://static.ajiu9.cn/images/20240314230158hA5bJW.png" alt="图片"></p>
<p>解决方案</p>
<p>写在前面，共用样式</p>
<pre><code class="language-html">&lt;style&gt;
  * {
    padding: 0;
    margin: 0;
  }
  .layout .content &gt; div {
    min-height: 100px;
    color: #fff;
  }
  .left {
    width: 200px;
    background: #facd89;
  }
  .center {
    background: #f19149;
  }
  .right {
    width: 200px;
    background: #88abda;
  }
&lt;/style&gt;
</code></pre>
<h4>1.float布局</h4>
<pre><code class="language-html">&lt;section class=&quot;layout float&quot;&gt;
  &lt;style&gt;
    .layout.float .left {
      float: left;
    }
    .layout.float .right {
      float: right;
    }
  &lt;/style&gt;

  &lt;article class=&quot;content&quot;&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;

    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;

    &lt;div class=&quot;center&quot;&gt;
      &lt;h1&gt;这是浮动布局解决方案&lt;/h1&gt;
    &lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>优点：布局简单，兼容性好。</li>
<li>缺点：脱离了文档流，需要清除浮动。</li>
</ul>
<h4>2.绝对定位</h4>
<pre><code class="language-html">&lt;section class=&quot;layout absolute&quot;&gt;
  &lt;style&gt;
    .layout.absolute .content &gt; div {
      position: absolute;
    }
    .layout.absolute .left {
      left: 0;
    }
    .layout.absolute .center {
      left: 200px;
      right: 200px;
    }
    .layout.absolute .right {
      right: 0;
    }
  &lt;/style&gt;
  &lt;article class=&quot;content&quot;&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;center&quot;&gt;&lt;h1&gt;这是绝对定位布局解决方案&lt;/h1&gt;&lt;/div&gt;
  &lt;/article&gt;
  /section&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>优点：布局简单，兼容性好,不容易出问题。</li>
<li>缺点：脱离了文档流，下面的所有子元素也会脱离文档流，导致很多时候的可使用性差。</li>
</ul>
<h4>3.flex布局</h4>
<pre><code class="language-html">&lt;section class=&quot;layout absolute&quot;&gt;
  &lt;style&gt;
    .layout.absolute .content {
      display: flex;
    }
    .layout.absolute .center {
      flex: 1;
    }
  &lt;/style&gt;
  &lt;article class=&quot;content&quot;&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;center&quot;&gt;&lt;h1&gt;这是flex布局解决方案&lt;/h1&gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>优点：css3新出的属性，比较完美的解决方式，移动端布局常用。</li>
<li>缺点：不兼容ie8以下的浏览器</li>
</ul>
<h4>4.table表格布局</h4>
<pre><code class="language-html">&lt;section class=&quot;layout table&quot;&gt;
  &lt;style&gt;
    .layout.table .content {
      width: 100%;
      display: table;
      min-height: 100px;
    }
    .layout.table .content &gt; div {
      display: table-cell;
    }
  &lt;/style&gt;
  &lt;article class=&quot;content&quot;&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;center&quot;&gt;&lt;h1&gt;这是table表格解决方案&lt;/h1&gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>
<p>优点：兼容性好。</p>
</li>
<li>
<p>缺点：单元格的高度都是一样的，有时候这种效果并不是我们想要的，当然这在高度自适应的情况下是一种比较好的解决方案。</p>
</li>
</ul>
<h4>5.grid栅格布局</h4>
<pre><code class="language-html">&lt;section class=&quot;layout gird&quot;&gt;
  &lt;style&gt;
    .layout.gird .content {
      display: grid;
      grid-template-rows: 100px;
      grid-template-columns: 200px auto 200px;
    }
  &lt;/style&gt;
  &lt;article class=&quot;content&quot;&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;center&quot;&gt;&lt;h1&gt;这是grid栅格布局解决方案&lt;/h1&gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>
<p>优点：将页面分割成数个主要区域，或者用来定义组件内部元素间大小、位置和图层之间的关系。</p>
</li>
<li>
<p>缺点：兼容性差。</p>
</li>
</ul>
<h4>6.双飞翼布局</h4>
<pre><code class="language-html">&lt;section class=&quot;layout fly&quot;&gt;
  &lt;style&gt;
    .layout.fly .main {
      float: left;
      width: 100%;
    }
    .layout.fly .main .center {
      margin: 0 200px;
      min-height: 100px;
    }
    .layout.fly .left {
      float: left;
      margin-left: -100%;
    }
    .layout.fly .right {
      float: right;
      margin-left: -200px;
    }
  &lt;/style&gt;
  &lt;article class=&quot;content&quot;&gt;
    &lt;div class=&quot;main&quot;&gt;
      &lt;div class=&quot;center&quot;&gt;&lt;h1&gt;这是双飞翼布局解决方案&lt;/h1&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>优点：main主体部分能优先加载。</li>
<li>缺点：脱离文档流，布局和样式复杂一些。</li>
</ul>
<h4>7.圣杯布局</h4>
<pre><code class="language-html">&lt;section class=&quot;layout grail&quot;&gt;
  &lt;style&gt;
    .layout.grail .content {
      margin: 0 200px;
    }
    .layout.grail .center {
      float: left;
      width: 100%;
    }
    .layout.grail .left {
      float: left;
      margin-left: -100%;
      position: relative;
      left: -200px;
    }
    .layout.grail .right {
      float: right;
      margin-left: -200px;
      position: relative;
      right: -200px;
    }
  &lt;/style&gt;
  &lt;article class=&quot;content&quot;&gt;
    &lt;div class=&quot;center&quot;&gt;&lt;h1&gt;这是圣杯布局解决方案&lt;/h1&gt;&lt;/div&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
  &lt;/article&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>优点：main主体部分能优先加载,布局简单。</li>
<li>缺点：脱离文档流，样式复杂。</li>
</ul>
<h3>清除浮动</h3>
<p>第六种双飞翼布局和第七种圣杯布局，是在浮动布局的基础上的演变。浮动布局需要清除浮动，它又有哪些清除浮动的方法呢？</p>
<h3>其他类似布局</h3>
<ul>
<li>三栏布局同上，高度也自适应？</li>
<li>中间和右侧固定，左侧自适应？</li>
<li>左侧和中间固定， 右侧自适应？</li>
<li>上下固定，中间自适应？</li>
<li>两栏布局？</li>
</ul>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
        <item>
            <title><![CDATA[JavaScript基本类型和引用类型]]></title>
            <link>https://ajiu9.cn/posts/js-type-about-type-and-Reference</link>
            <guid>https://ajiu9.cn/posts/js-type-about-type-and-Reference</guid>
            <pubDate>Fri, 01 Dec 2017 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>CMAScript的变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型的值是简单的数据段，引用类型的值是多个值构成的对象。</p>
<p>把一个值赋值给变量时，解析器首先确定这个值是基本类型的值还是引用类型的值。基本数据类型有5种：Undefined、Null、Boolean、Number、String。这5种基本数据类型是按值访问的，因为可以操作保存在变量中的实际值。引用类型的值是按照引用访问的，因为javaScript不允许访问内存中的位置，不能直接操作对象的内存空间。（为对象添加属性操作的是实际对象）</p>
<p><strong>动态属性</strong></p>
<p>首先我们来定义一个引用类型的值：</p>
<p><img src="https://static.ajiu9.cn/images/202403102118517qwJD2.png" alt="图片"></p>
<p>以上代码创建了一个对象并将其保存在person变量中，然后为变量添加了一个名为name的属性，并将字符串“江月夜”赋给了这个属性。之后通过函数alert（）访问了这个新属性。如果对象不被销毁或者这个属性不被删除，则各属性将一直存在。</p>
<p>但是，不能给基本类型的值添加属性（不会导致错误）</p>
<p><img src="https://static.ajiu9.cn/images/20240310211733UOVZPP.png" alt="图片"></p>
<p><strong>赋值变量值</strong></p>
<p>除了保存方式不一样，变量复制也有区别。</p>
<p>基本类型复制后的俩个变量彼此独立，此后，这俩个变量可以参与任何操作而不会互相影响。</p>
<p>引用类型的变量复制其实是一个指针，而这个指针指向存储在堆中的一个对象。复制结束后，俩个对象实际上引用同一个对象。改变其中一个变量，就会影响另一个变量。</p>
<p><img src="https://static.ajiu9.cn/images/20240310211540NpJlfl.png" alt="图片"></p>
<p><strong>传递参数</strong></p>
<p>函数的参数是按值传递的，基本类型的传递会把值复制给arguments对象中的一个元素（局部变量），引用类型的传递会把这个值在内存中的地址复制给一个局部变量，所以会反应在函数的外部。</p>
]]></content:encoded>
            <author>615944323@qq.com (Ajiu9)</author>
        </item>
    </channel>
</rss>